services:

  microservice1:
    build:
      context: .
      dockerfile: ./Dockerfile
    entrypoint: /app/microservice1
    ports:
      - "8080:8080"
    depends_on:
      pg1:
        condition: service_healthy
    volumes:
      - gocache:/.cache

  microservice2:
    build:
      context: .
      dockerfile: ./Dockerfile
    entrypoint: /app/microservice2
    ports:
      - "8082:8080"
    depends_on:
      pg2:
        condition: service_healthy
    volumes:
      - gocache:/.cache

  kafkaui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"

    environment:
        - KAFKA_CLUSTERS_0_NAME=local
        - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker1:9092,broker2:9092,broker3:9092
    depends_on:
      - broker1
      - broker2
      - broker3

  broker1:
    image: apache/kafka:3.9.0

    ports:
      - "10002:10002"
    environment:
      - CLUSTER_ID=kjk2323sfkdsfsd
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@broker1:9093,2@broker2:9093,3@broker3:9093
      - KAFKA_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL_LOCALHOST://:10002
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://broker1:9092,EXTERNAL_LOCALHOST://localhost:10002
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL_LOCALHOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CLIENT_LISTENER_NAME=EXTERNAL_LOCALHOST
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER

  broker2:
    image: apache/kafka:3.9.0
    ports:
      - "10003:10003"
    environment:
      - CLUSTER_ID=kjk2323sfkdsfsd
      - KAFKA_NODE_ID=2
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@broker1:9093,2@broker2:9093,3@broker3:9093
      - KAFKA_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL_LOCALHOST://:10003
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://broker2:9092,EXTERNAL_LOCALHOST://localhost:10003
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL_LOCALHOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CLIENT_LISTENER_NAME=EXTERNAL_LOCALHOST
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER

  broker3:
    image: apache/kafka:3.9.0
    ports:
      - "10004:10004"
    environment:
      - CLUSTER_ID=kjk2323sfkdsfsd
      - KAFKA_NODE_ID=3
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@broker1:9093,2@broker2:9093,3@broker3:9093
      - KAFKA_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL_LOCALHOST://:10004
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://broker3:9092,EXTERNAL_LOCALHOST://localhost:10004
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL_LOCALHOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CLIENT_LISTENER_NAME=EXTERNAL_LOCALHOST
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER

  pg1:
    image: postgres:15.2-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: db
      SERVICE_NAME: pg
      POSTGRES_HOST_AUTH_METHOD: trust
      PAGER: less
      TERM: xterm
    expose:
      - "5432"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - data1:/var/lib/postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d db" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  pg2:
    image: postgres:15.2-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: db
      SERVICE_NAME: pg
      POSTGRES_HOST_AUTH_METHOD: trust
      PAGER: less
      TERM: xterm
    expose:
      - "5432"
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - data2:/var/lib/postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d db" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  data1:
  data2:
  gocache:



